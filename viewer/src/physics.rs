use nalgebra_glm as glm;
use rapier3d::{
    dynamics::{
        BodyStatus, IntegrationParameters, JointSet, RigidBodyBuilder, RigidBodyHandle,
        RigidBodySet,
    },
    geometry::{
        Ball, BroadPhase, ColliderBuilder, ColliderHandle, ColliderSet, NarrowPhase, Shape,
    },
    na::{Isometry3, Vector3},
    pipeline::PhysicsPipeline,
};

pub struct PhysicsWorld {
    /// Responsible for executing entire simulation
    pub pipeline: PhysicsPipeline,

    /// A global force affecting all dynamic rigid-bodies with non-zero mass
    pub gravity: glm::Vec3,

    /// Contains elements to configure the constraint solver
    pub integration_parameters: IntegrationParameters,

    /// Performs coarse AABB-based collision detections
    pub broad_phase: BroadPhase,

    /// Performs precise contact point determination based on the collision pairs generated by the broad_phase
    pub narrow_phase: NarrowPhase,

    /// Contains all the rigid-bodies that are part of the simulation
    pub bodies: RigidBodySet,

    /// Contains all the colliders that are part of the simulation
    pub colliders: ColliderSet,

    /// Contains all the joint constraints that are part of the simulation
    pub joints: JointSet,
}

impl PhysicsWorld {
    pub fn new() -> Self {
        Self {
            pipeline: PhysicsPipeline::new(),
            gravity: glm::vec3(0.0, -9.81, 0.0),
            integration_parameters: IntegrationParameters::default(),
            broad_phase: BroadPhase::new(),
            narrow_phase: NarrowPhase::new(),
            bodies: RigidBodySet::new(),
            colliders: ColliderSet::new(),
            joints: JointSet::new(),
        }
    }

    pub fn add_cubes(&mut self) {
        let ground_size = 100.1;
        let ground_height = 0.1;
        let rigid_body = RigidBodyBuilder::new_static()
            .translation(0.0, -ground_height, 0.0)
            .build();
        let handle = self.bodies.insert(rigid_body);
        let collider = ColliderBuilder::cuboid(ground_size, ground_height, ground_size).build();
        self.colliders.insert(collider, handle, &mut self.bodies);

        // Build the dynamic box rigid body.
        let rigid_body = RigidBodyBuilder::new_dynamic()
            .translation(1.1, 0.0, 0.0)
            .rotation(Vector3::new(0.8, 0.2, 0.1))
            .can_sleep(false)
            .build();
        let handle = self.bodies.insert(rigid_body);
        let collider = ColliderBuilder::cuboid(2.0, 0.1, 1.0).build();
        self.colliders.insert(collider, handle, &mut self.bodies);
    }

    pub fn step(&mut self) {
        // Collects all the events generated by the physics pipeline
        // Ignoring for now
        let event_handler = ();

        self.pipeline.step(
            &self.gravity,
            &self.integration_parameters,
            &mut self.broad_phase,
            &mut self.narrow_phase,
            &mut self.bodies,
            &mut self.colliders,
            &mut self.joints,
            None,
            None,
            &event_handler,
        );
    }
}
